{"version":3,"sources":["components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","Utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","Question","answers","callback","userAnswer","questionNum","totalQues","className","dangerouslySetInnerHTML","__html","map","el","index","key","correctAnsewer","answer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","question","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setgameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUES","nextQuestion","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ce6347e.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div`\nmax-width:1100px;\nbackground: #ebfeff;\nborder-radius: 10px;\nborder:2px solid #0085a3;\npadding:20px;\nbox-shadow: 0px 5px 10px rgba(0,0,0,0.25);\ntext-align:center;\n    p{\n    font-size:1rem;\n}\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3 ease;\n:hover{\n    opacity: 0.8;\n}\n\nbutton{\n    cursor: pointer;\n    user-select:none;\n    width:  100%;\n    height:40px;\n    margin:5px 0;\n    background: ${({ correct, userClicked }) =>\n        correct\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86 )'\n            : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868 )'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4 )'};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\n    border-radius: 10px;\n    color:#fff;\n    text-shadow: 0px 1px 0px rgba(0,0,0,0.25)\n}\n`","import { shuffleArray } from \"./Utils\"\n\nexport type Question = {\n    category: string,\n    correct_answer: string,\n    difficulty: string,\n    incorrect_answers: string[],\n    question: string,\n    type: string\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json()\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n    }))\n\n\n}","import React from \"react\";\nimport { AnswerObject } from \"../App\";\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\ninterface Props {\n  Question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNum: number;\n  totalQues: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n  Question,\n  answers,\n  callback,\n  userAnswer,\n  questionNum,\n  totalQues,\n}) => {\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNum} / {totalQues}\n      </p>\n      {\n        <div>\n          <p dangerouslySetInnerHTML={{ __html: Question }}></p>\n          <div>\n            {answers.map((el, index) => (\n              <ButtonWrapper\n                key={index}\n                correct={userAnswer?.correctAnsewer === el}\n                userClicked={userAnswer?.answer === el}\n              >\n                <button\n                  disabled={userAnswer ? true : false}\n                  value={el}\n                  onClick={callback}\n                >\n                  <span dangerouslySetInnerHTML={{ __html: el }}></span>\n                </button>\n              </ButtonWrapper>\n            ))}\n          </div>\n        </div>\n      }\n    </Wrapper>\n  );\n};\n\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5)\n","import styled, { createGlobalStyle } from 'styled-components'\n\n\nexport const GlobalStyle = createGlobalStyle`\nhtml{\n    height: 100%;\n}\n\nbody{\n    background-color: #ffff;\n    margin:0;\n    padding: 0 20px;\n    display:flex;\n    justify-content: center;\n}\n*{\n    box-sizing:border-box;\n    font-family: 'Catamaran', sans-serif;\n}\n\n`\n\nexport const Wrapper = styled.div`\ndisplay:flex;\nflex-direction:column;\nalign-items: center;\n\n>p{\n    color: #fff\n}\n\n.score {\n    color:#000;\n    font-size: 2rem;\n    margin:0;\n}\n\n.start , .next{\n    cursor:pointer;\n    background: liner-gradient(180deg, #fff, #ffcc91);\n    border:2px  solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    border-radius: 10px;\n    height:40px;\n    margin: 20px 0;\n    padding: 0 40px;\n}\n\n.start{\n    max-width:200px;\n}\n\n`","import React, { useState } from \"react\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"./API\";\nimport { QuestionState, Difficulty } from \"./API\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\ninterface Props {}\nconst TOTAL_QUES = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnsewer: string;\n};\nconst App: React.FC<Props> = () => {\n  // todo states\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setgameOver] = useState(true);\n\n  //todo functions\n  const startTrivia = async () => {\n    setLoading(true);\n    setgameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUES, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // ** user answers\n      const answer = e.currentTarget.value;\n      // ** check answer against correct value\n      const correct = questions[number].correct_answer === answer;\n      // addscore ifcorrect answer\n      if (correct) setScore((prev) => prev + 1);\n      // ** save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnsewer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  const nextQuestion = () => {\n    // ** go to next question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUES) {\n      setgameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper className=\"App\">\n        <h1>React Quiz</h1>\n        {/*  conditional rendering in react */}\n        {gameOver || userAnswers.length === TOTAL_QUES ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score} </p> : null}\n        {loading && <p className=\"score\"> Loading Questions</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQues={TOTAL_QUES}\n            Question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          ></QuestionCard>\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUES - 1 ? (\n          <button onClick={nextQuestion} className=\"next\">\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}